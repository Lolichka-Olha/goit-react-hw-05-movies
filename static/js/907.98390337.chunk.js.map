{"version":3,"file":"static/js/907.98390337.chunk.js","mappings":"4TAEAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAW,mCAAG,oGACFF,IAAAA,IAAA,sCAAyCC,IADvC,cACnBE,EADmB,yBAElBA,GAFkB,2CAAH,qDAKXC,EAAY,mCAAG,WAAMC,GAAN,uFACHL,IAAAA,IAAA,gCACIC,EADJ,iCACoCI,EADpC,gCADG,cACpBF,EADoB,yBAInBA,GAJmB,2CAAH,sDAOZG,EAAU,mCAAG,WAAMC,GAAN,uFACDP,IAAAA,IAAA,iBACXO,EADW,oBACQN,EADR,oBADC,cAClBE,EADkB,yBAIjBA,GAJiB,2CAAH,sDAOVK,EAAO,mCAAG,WAAMD,GAAN,uFACEP,IAAAA,IAAA,iBACXO,EADW,4BACgBN,EADhB,oBADF,cACfE,EADe,yBAIdA,GAJc,2CAAH,sDAOPM,EAAU,mCAAG,WAAMF,GAAN,uFACDP,IAAAA,IAAA,iBACXO,EADW,4BACgBN,EADhB,oBADC,cAClBE,EADkB,yBAIjBA,GAJiB,2CAAH,qD,uJC7BVO,E,QAAaC,EAAAA,GAAH,0H,mBCkBvB,EAhBgB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,SAAC,IAAD,WACE,SAACF,EAAD,UACGE,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,OAA5B,OACX,2BACE,wBAAKA,KACL,uBAAIF,KACJ,uBAAIC,MAHGF,EADE,OAUpB,E,UCoBD,EAhCoB,WAClB,IAAQP,GAAYW,EAAAA,EAAAA,MAAZX,QACR,GAA8BY,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMjB,GAAN,gFACnBe,GAAW,GADQ,mBAGMb,EAAAA,EAAAA,IAAWF,GAHjB,gBAGTkB,EAHS,EAGTA,KACRL,EAAWK,EAAKC,SAJC,gDAMjBC,QAAQC,IAAR,MANiB,yBAQjBN,GAAW,GARM,4EAAH,sDAWlBE,EAAajB,EACd,GAAE,CAACA,KAGF,gCACGc,IAAW,SAACQ,EAAA,EAAD,IACQ,IAAnBjB,EAAQkB,QACP,SAAC,EAAD,CAASlB,QAASA,KAElB,qEAIP,C","sources":["api/api.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","pages/ReviewsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '09ade12554b40345f62518dc503f229d';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const searchMovies = async searchQuery => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return response;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response;\n};\n","import styled from '@emotion/styled';\n\nexport const StyledList = styled.ul`\n  list-style: none;\n  h2 {\n    margin-bottom: 10px;\n  }\n  p {\n    margin-bottom: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledList } from './Reviews.styled';\nimport { Container } from '../App/App.styled';\n\nconst Reviews = ({ reviews }) => {\n  return (\n    <Container>\n      <StyledList>\n        {reviews.map(({ id, created_at, content, author }) => (\n          <li key={id}>\n            <h2>{author}</h2>\n            <p>{created_at}</p>\n            <p>{content}</p>\n          </li>\n        ))}\n      </StyledList>\n    </Container>\n  );\n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      created_at: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getReviews } from '../api/api';\nimport Reviews from '../components/Reviews/Reviews';\nimport Loader from 'components/Loader/Loader';\n\nconst ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchReviews = async movieId => {\n      setLoading(true);\n      try {\n        const { data } = await getReviews(movieId);\n        setReviews(data.results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {reviews.length !== 0 ? (\n        <Reviews reviews={reviews} />\n      ) : (\n        <p>There are no reviews for this movie yet</p>\n      )}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n"],"names":["axios","API_KEY","getTrending","response","searchMovies","searchQuery","getDetails","movieId","getCast","getReviews","StyledList","styled","reviews","map","id","created_at","content","author","useParams","useState","setReviews","loading","setLoading","useEffect","fetchReviews","data","results","console","log","Loader","length"],"sourceRoot":""}